<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jingyan.agri.dao.sys.MetaDao">

	<select id="detectSQLLiteralIsEscaped" resultType="Boolean">
		SELECT 'a' = '\a';
	</select>

	<select id="getTemplateTables" resultType="Meta">
		SELECT id, tableName, tempId, projId, `key`, filterColumn, schemaText,
			sortConfigText, searchConfigText, editConfigText, viewConfigText
		FROM meta
	    WHERE tempId = #{tempId} AND projId = -1
	</select>
	<select id="getTemplateKeyedTable" resultType="Meta">
		SELECT id, tableName, tempId, projId, `key`, filterColumn, schemaText,
			sortConfigText, searchConfigText, editConfigText, viewConfigText
		FROM meta
	    WHERE tempId = #{tempId} AND projId = -1 AND `key` = #{key}
	</select>

	<select id="getProjTables" resultType="Meta">
		SELECT id, tableName, tempId, projId, `key`, filterColumn, schemaText,
			sortConfigText, searchConfigText, editConfigText, viewConfigText
		FROM meta
	    WHERE projId = #{projId}
	</select>
	<select id="getProjectKeyedTable" resultType="Meta">
		SELECT id, tableName, tempId, projId, `key`, filterColumn, schemaText,
			sortConfigText, searchConfigText, editConfigText, viewConfigText
		FROM meta
	    WHERE projId = #{projId} AND `key` = #{key}
	</select>

	<insert id="cloneProjectKeyedTableFromTemplate">
		INSERT INTO meta (
			tableName, tempId, projId, `key`, filterColumn, schemaText,
			sortConfigText, searchConfigText, editConfigText, viewConfigText)
		SELECT
			#{tableName}, tempId, #{projId}, `key`, filterColumn, schemaText,
			sortConfigText, searchConfigText, editConfigText, viewConfigText
		FROM meta
		WHERE tempId = #{tempId} AND projId = -1 AND `key` = #{key}
	</insert>

	<insert id="addMeta" parameterType="Meta"
		useGeneratedKeys="true" keyProperty="id" keyColumn="id">
		INSERT INTO meta (
			tableName, tempId, projId, `key`, filterColumn, schemaText,
			sortConfigText, searchConfigText, editConfigText, viewConfigText)
		VALUES (
			#{tableName}, #{tempId}, #{projId}, #{key}, #{filterColumn},
			#{schemaText}, #{searchConfigText}, #{editConfigText}, #{viewConfigText})
	</insert>

	<insert id="cloneTable">
		CREATE TABLE `${newTable}` LIKE `${srcTable}`
	</insert>
	
	<insert id="createTable" parameterType="Meta">
		CREATE TABLE `${tableName}` (
		<foreach item="col" collection="schema.columns" separator=", ">
		`${col.name}` ${col.type} <if test="col.isnull">DEFAULT NULL</if><if test="!col.isnull">NOT NULL</if>
		<if test="!col.isai">AUTO_INCREMENT</if>
		<if test="col.as != null and col.as != ''">AS (${col.as})</if>
		</foreach>
		<if test="schema.pk != null and !schema.pk.isEmpty()">
		, PRIMARY KEY (<foreach item="col" collection="schema.pk" separator=", ">`${col}`</foreach>)
		</if>
		)
	</insert>

	<select id="queryCount" resultType="int">
		SELECT count(*) FROM `${tableName}`
		<if test="search != null and search.conditions != null">
		<where>
		<foreach item="sub" collection="search.conditions">
		AND (<foreach item="cond" collection="sub" separator=" OR "> ${cond} </foreach>)
		</foreach>
		</where>
		</if>
	</select>

	<select id="query" resultType="map">
		SELECT * FROM `${tableName}`
		<if test="search != null and search.conditions != null">
		<where>
		<foreach item="sub" collection="search.conditions" separator=" AND ">
			(<foreach item="cond" collection="sub" separator=" OR "> ${cond} </foreach>)
		</foreach>
		</where>
		</if>
		<if test="view != null and view.sqlOrderBy != null and view.sqlOrderBy != ''">
		ORDER BY ${view.sqlOrderBy}
		</if>
		<if test="view != null">
		LIMIT #{view.offset}, #{view.pageSize}
		</if>
	</select>

	<select id="queryWithStatusCount" resultType="int">
		SELECT COUNT(*) FROM (
			SELECT
				<foreach item="i" collection="taskIds">
					`task_${i}`.`status` as `status_${i}`,
					`task_${i}`.`time` as `time_${i}`,
					`user_${i}`.`name` as `userName_${i}`,
					`organ_${i}`.`name` as `organName_${i}`,
				</foreach>
				`status`.`datakey`,
				`status`.`stateId`,
				`modifyUser`.`name` as `modifyUserName`,
				`status`.`modifyTime`,
				`createUser`.`name` as `createUserName`,
				`status`.`createTime`,
				`status`.`remarks`,
				`status`.`tags`,
				`data`.*
			FROM `${dataTable}` as `data`
			JOIN `${statusTable}` as `status` on `data`.`${dataKey}` = `status`.`datakey`
			LEFT JOIN `dealer` as `modifyUser` on `status`.`modifyUserId` = `modifyUser`.id
			LEFT JOIN `dealer` as `createUser` on `status`.`modifyUserId` = `createUser`.id
			<foreach item="i" collection="taskIds">
				LEFT JOIN `${taskTable}` as `task_${i}` on `status`.`datakey` = `task_${i}`.`datakey` and `task_${i}`.`taskId` = ${i}
				LEFT JOIN `dealer` as `user_${i}` on `task_${i}`.`userId` = `user_${i}`.id
				LEFT JOIN `organ` as `organ_${i}` on `user_${i}`.`organId` = `organ_${i}`.id
			</foreach>
		) as `sub`
		<if test="search != null and search.conditions != null">
		<where>
		<foreach item="sub" collection="search.conditions">
		AND (<foreach item="cond" collection="sub" separator=" OR "> ${cond} </foreach>)
		</foreach>
		</where>
		</if>
	</select>

	<select id="queryWithStatus" resultType="map">
		SELECT * FROM (
			SELECT
				<foreach item="i" collection="taskIds">
					`task_${i}`.`status` as `status_${i}`,
					`task_${i}`.`time` as `time_${i}`,
					`user_${i}`.`name` as `userName_${i}`,
					`organ_${i}`.`name` as `organName_${i}`,
				</foreach>
				`status`.`datakey`,
				`status`.`stateId`,
				`modifyUser`.`name` as `modifyUserName`,
				`status`.`modifyTime`,
				`createUser`.`name` as `createUserName`,
				`status`.`createTime`,
				`status`.`remarks`,
				`status`.`tags`,
				`data`.*
			FROM `${dataTable}` as `data`
			JOIN `${statusTable}` as `status` on `data`.`${dataKey}` = `status`.`datakey`
			LEFT JOIN `dealer` as `modifyUser` on `status`.`modifyUserId` = `modifyUser`.id
			LEFT JOIN `dealer` as `createUser` on `status`.`modifyUserId` = `createUser`.id
			<foreach item="i" collection="taskIds">
				LEFT JOIN `${taskTable}` as `task_${i}` on `status`.`datakey` = `task_${i}`.`datakey` and `task_${i}`.`taskId` = ${i}
				LEFT JOIN `dealer` as `user_${i}` on `task_${i}`.`userId` = `user_${i}`.id
				LEFT JOIN `organ` as `organ_${i}` on `user_${i}`.`organId` = `organ_${i}`.id
			</foreach>
		) as `sub`
		<if test="search != null and search.conditions != null">
		<where>
		<foreach item="sub" collection="search.conditions" separator=" AND ">
			(<foreach item="cond" collection="sub" separator=" OR "> ${cond} </foreach>)
		</foreach>
		</where>
		</if>
		<if test="view != null and view.sqlOrderBy != null and view.sqlOrderBy != ''">
		ORDER BY ${view.sqlOrderBy}
		</if>
		<if test="view != null">
		LIMIT #{view.offset}, #{view.pageSize}
		</if>
	</select>

	<select id="collectOptList" resultType="java.lang.String">
		SELECT DISTINCT `${colName}` FROM `${tableName}` ORDER BY `${colName}`
	</select>

	<select id="querySum" resultType="map">
		SELECT `${keyName}`, SUM(`${colName}`) AS `${colName}` FROM `${tableName}`
		WHERE `${filterKey}` IN
			(<foreach item="key" collection="keys" separator=",">#{key}</foreach>)
		GROUP BY `${keyName}`
		ORDER BY `${keyName}`
	</select>
	
	<select id="get" resultType="map">
		SELECT * FROM `${tableName}` WHERE `${key}` = #{id}
	</select>

	<select id="get2" resultType="map">
		SELECT * FROM `${tableName}` WHERE `${key1}` = #{id1} AND `${key2}` = #{id2} 
	</select>

	<select id="getAll" resultType="map">
		SELECT * FROM `${tableName}`
	</select>

	<insert id="add">
		INSERT INTO `${tableName}`
		<foreach index="field" item="value" collection="data" open="(" close=")" separator=",">
			`${field}`
		</foreach>
		VALUES
		<foreach index="field" item="value" collection="data" open="(" close=")" separator=",">
			#{value}
		</foreach>
	</insert>

	<update id="update">
		UPDATE `${tableName}` SET
		<foreach index="field" item="value" collection="data" separator=",">
			`${field}` = #{value}
		</foreach>
		WHERE `${key}` = #{id}
	</update>

	<update id="update2">
		UPDATE `${tableName}` SET
		<foreach index="field" item="value" collection="data" separator=",">
			`${field}` = #{value}
		</foreach>
		WHERE `${key1}` = #{id1} AND `${key2}` = #{id2}
	</update>

	<delete id="remove">
		DELETE FROM `${tableName}`
		WHERE `${key}` = #{id}
	</delete>

	<delete id="remove2">
		DELETE FROM `${tableName}`
		WHERE `${key1}` = #{id1} AND `${key2}` = #{id2}
	</delete>

</mapper>